pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION = "ap-southeast-1"
        SKIP = "N"
        TERRADESTROY = "N"
        FIRST_DEPLOY = "Y"
        STATE_BUCKET = "terraform-state-bucket-unique123456"  // Ensure this name is unique
        ANSIBLE_BUCKET_NAME = "ansible-bucket-unique123456"  // Ensure this name is unique
        ANSIBLE_SSH_PRIVATE_KEY = credentials('ansible-ssh-key')
        ANSIBLE_CONFIG = "${WORKSPACE}/provision-infrastructure-using-jenkins/ansible/ansible_playbooks/ansible.cfg"
    }
    parameters {
        string(name: 'STAGE_TO_RUN', defaultValue: '', description: 'Comma-separated list of stages to run')
    }
    stages {
        stage("Create Terraform State Buckets") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Create Terraform State Buckets') }
                }
                allOf {
                    environment name: 'FIRST_DEPLOY', value: 'Y'
                    environment name: 'TERRADESTROY', value: 'N'
                    environment name: 'SKIP', value: 'N'
                }
            }
            steps {
                script {
                    def bucketExists = sh(
                        script: "aws s3 ls s3://${STATE_BUCKET}",
                        returnStatus: true
                    ) == 0

                    if (!bucketExists) {
                        sh "aws s3 mb s3://${STATE_BUCKET}"
                    } else {
                        echo "Bucket ${STATE_BUCKET} already exists, skipping creation."
                    }
                }
            }
        }

        stage("Deploy Ansible Infra") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Deploy Ansible Infra') }
                }
                allOf {
                    environment name: 'TERRADESTROY', value: 'N'
                    environment name: 'SKIP', value: 'N'
                }
            }
            stages {
                stage('Validate Ansible Infra') {
                    steps {
                        sh '''
                        cd provision-infrastructure-using-jenkins/terraform/s3-bucket
                        terraform init
                        terraform validate
                        '''
                    }
                }
                stage('Deploy Ansible Infra') {
                    steps {
                        sh '''
                        cd provision-infrastructure-using-jenkins/terraform/s3-bucket
                        terraform plan -out outfile
                        terraform apply outfile
                        '''
                    }
                }
            }
        }

        stage("Deploy Networking") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Deploy Networking') }
                }
                allOf {
                    environment name: 'TERRADESTROY', value: 'N'
                    environment name: 'SKIP', value: 'N'
                }
            }
            stages {
                stage('Validate n/w Infra') {
                    steps {
                        sh '''
                        cd provision-infrastructure-using-jenkins/terraform/networking
                        terraform init
                        terraform validate
                        '''
                    }
                }
                stage('Deploy n/w Infra') {
                    steps {
                        sh '''
                        cd provision-infrastructure-using-jenkins/terraform/networking
                        terraform plan -out outfile
                        terraform apply outfile
                        '''
                    }
                }
            }
        }

        stage("Deploy Controlplane") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Deploy Controlplane') }
                }
                allOf {
                    environment name: 'TERRADESTROY', value: 'N'
                    environment name: 'SKIP', value: 'N'
                }
            }
            stages {
                stage("Deploy controlplane") {
                    when {
                        environment name: 'SKIP', value: 'N'
                    }
                    stages {
                        stage('Validate controlplane infra') {
                            steps {
                                sh '''
                                cd provision-infrastructure-using-jenkins/terraform/kube-control-plane
                                terraform init
                                terraform validate
                                '''
                            }
                        }
                        stage('Deploy controlplane infra') {
                            steps {
                                sh '''
                                cd provision-infrastructure-using-jenkins/terraform/kube-control-plane
                                terraform plan -out outfile
                                terraform apply outfile
                                '''
                            }
                        }
                        stage('Prepare inv file') {
                            when {
                                environment name: 'SKIP', value: 'N'
                            }
                            steps {
                                script {
                                    sh """
                                        ansible --version
                                        cd provision-infrastructure-using-jenkins/ansible/ansible_playbooks
                                        
                                        # Display the current executing user
                                        echo "Current executing user: $(whoami)"
                                        
                                        # Print environment variables
                                        env
                                        
                                        # Run Ansible playbook
                                        ansible-playbook -vvv identify_controlplane.yml -i inv
                                        
                                        # Display the contents of the inventory file
                                        cat inv
                                        """
                                }
                            }
                        }
                    }
                }

                stage("bootstrap controlplane") {
                    when {
                        environment name: 'SKIP', value: 'N'
                    }
                    steps {
                        script {
                            sh """
                            cd provision-infrastructure-using-jenkins/ansible/ansible_role
                            aws s3 cp s3://${env.ANSIBLE_BUCKET_NAME}/inv inv
                            ls -a
                            pwd
                            ansible-playbook main.yml -i inv                                    
                            """
                        }
                    }
                }
            }
        }

        stage("Empty S3 Buckets") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Empty S3 Buckets') }
                }
                allOf {
                    environment name: 'TERRADESTROY', value: 'Y'
                }
            }
            steps {
                script {
                    // Empty the S3 bucket
                    sh "aws s3 rm s3://${ANSIBLE_BUCKET_NAME} --recursive"
                }
            }
        }

        stage("Destroy Infrastructure") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Destroy Infrastructure') }
                }
                allOf {
                    environment name: 'TERRADESTROY', value: 'Y'
                }
            }
            steps {
                script {
                    // Initialize Terraform and destroy resources
                    sh '''
                    cd provision-infrastructure-using-jenkins/terraform/kube-control-plane
                    terraform init
                    terraform destroy -auto-approve
                    '''
                    sh '''
                    cd provision-infrastructure-using-jenkins/terraform/networking
                    terraform init
                    terraform destroy -auto-approve
                    '''
                    sh '''
                    cd provision-infrastructure-using-jenkins/terraform/s3-bucket
                    terraform init
                    terraform destroy -auto-approve
                    '''
                }
            }
        }

        stage("Delete State Buckets") {
            when {
                anyOf {
                    expression { params.STAGE_TO_RUN == '' }
                    expression { params.STAGE_TO_RUN.contains('Delete State Buckets') }
                }
                allOf {
                    environment name: 'TERRADESTROY', value: 'Y'
                }
            }
            steps {
                script {
                    // Delete the state bucket manually
                    def bucketExists = sh(
                        script: "aws s3 ls s3://${STATE_BUCKET}",
                        returnStatus: true
                    ) == 0

                    if (bucketExists) {
                        sh "aws s3 rb s3://${STATE_BUCKET} --force"
                    } else {
                        echo "Bucket ${STATE_BUCKET} does not exist, skipping deletion."
                    }
                }
            }
        }

    }

    post {
        always {
            cleanWs()
        }
    }
}