- name: Update apt cache
  apt:
    update_cache: yes

- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
    state: present

# curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
- name: Download Kubernetes APT repository GPG key
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
- name: Add Kubernetes APT repository
  shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  args:
    creates: /etc/apt/sources.list.d/kubernetes.list

- name: Update apt cache again
  apt:
    update_cache: yes

- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Hold Kubernetes packages to prevent upgrades
  command: >
    sudo apt-mark hold kubelet kubeadm kubectl

- name: Set cgroup driver for kubelet
  lineinfile:
    path: /etc/default/kubelet
    line: 'KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"'

- name: Reload systemd and restart kubelet
  shell: |
    sudo systemctl daemon-reload && sudo systemctl restart kubelet

- name: Add Docker daemon configuration
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
              "max-size": "100m"
          },
          "storage-driver": "overlay2"
      }

- name: Reload systemd and restart Docker
  shell: |
    sudo systemctl daemon-reload && sudo systemctl restart docker

- name: Set fail-swap-on for kubelet
  lineinfile:
    path: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
    line: 'Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"'

- name: Reload systemd and restart kubelet after config change
  shell: |
    sudo systemctl daemon-reload && sudo systemctl restart kubelet

- name: Initialize Kubernetes cluster
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=master-node --upload-certs --ignore-preflight-errors=NumCPU,Mem
  register: kubeadm_output

- name: Create .kube directory
  file:
    path: /root/.kube
    state: directory
    mode: '0755'

- name: Copy kubeconfig to .kube directory
  command: cp /etc/kubernetes/admin.conf /root/.kube/config

- name: Change ownership of kubeconfig file
  file:
    path: /root/.kube/config
    owner: root
    group: root
    mode: '0644'

- name: Install Flannel network plugin
  command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  environment:
    KUBECONFIG: /root/.kube/config

- name: Remove the control-plane taint from all nodes
  shell: |
    kubectl taint nodes --all node-role.kubernetes.io/control-plane-
  args:
    warn: false
  register: result
  failed_when: "'no taint found' not in result.stderr"
  changed_when: "'node-role.kubernetes.io/control-plane-' in result.stdout"
  ignore_errors: yes

# - name: Add Kubernetes repository
#   yum_repository:
#     name: kubernetes
#     description: Kubernetes Repository
#     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
#     gpgcheck: yes
#     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg
#             https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
#     enabled: yes

# - name: Remove conflicting Docker packages
#   yum:
#     name:
#       - docker-ce-cli
#       - docker-buildx-plugin
#     state: absent
#   ignore_errors: yes

# - name: Install Docker from Amazon Linux repository
#   yum:
#     name: "{{ item }}"
#     state: latest
#   loop:
#     - docker
#     - containerd.io

# - name: Start and enable Docker service
#   service:
#     name: docker
#     state: started
#     enabled: yes

# - name: Add ec2-user to the docker group
#   user:
#     name: ec2-user
#     groups: docker
#     append: yes

# - name: Download and install kubectl
#   get_url:
#     url: https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl
#     dest: /usr/local/bin/kubectl
#     mode: '0755'

# - name: Download and install kubeadm
#   get_url:
#     url: https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubeadm
#     dest: /usr/local/bin/kubeadm
#     mode: '0755'

# - name: Download and install kubelet
#   get_url:
#     url: https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubelet
#     dest: /usr/local/bin/kubelet
#     mode: '0755'

# - name: Create kubelet systemd service file
#   copy:
#     content: |
#       [Unit]
#       Description=kubelet: The Kubernetes Node Agent
#       Documentation=https://kubernetes.io/docs/
#       After=network.target

#       [Service]
#       ExecStart=/usr/local/bin/kubelet
#       Restart=always
#       StartLimitInterval=0
#       RestartSec=10
#       KillMode=process
#       Delegate=yes
#       LimitNOFILE=65536
#       LimitNPROC=65536
#       LimitCORE=infinity
#       TasksMax=infinity
#       OOMScoreAdjust=-999
#       Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
#       Environment="KUBELET_KUBEADM_ARGS=--cgroup-driver=systemd --fail-swap-on=false"
#       EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
#       EnvironmentFile=-/etc/default/kubelet
#       ExecStartPre=/bin/mkdir -p /sys/fs/cgroup/cpuset/system.slice/kubelet.service
#       # The following line is removed
#       # ExecStartPre=/bin/bash -c '/bin/echo $$ > /sys/fs/cgroup/cpuset/system.slice/kubelet.service/cgroup.procs'
      
#       [Install]
#       WantedBy=multi-user.target
#     dest: /etc/systemd/system/kubelet.service
#     mode: '0644'

# - name: Reload systemd to apply kubelet service
#   command: systemctl daemon-reload

# - name: Ensure kubelet is started and enabled
#   service:
#     name: kubelet
#     state: started
#     enabled: yes

# - name: Disable swap
#   command: swapoff -a

# - name: Remove swap entry from /etc/fstab
#   replace:
#     path: /etc/fstab
#     regexp: '^\s*[^#]+swap\s+'
#     replace: '# &'

# - name: Update Docker daemon configuration
#   template:
#     src: daemon.json.j2
#     dest: /etc/docker/daemon.json
#   notify: restart docker

# - name: Remove containerd config
#   file:
#     path: /etc/containerd/config.toml
#     state: absent

# - name: Restart containerd
#   service:
#     name: containerd
#     state: restarted

# - name: Upgrade instance type (manual step)
#   debug:
#     msg: "Consider upgrading your EC2 instance to at least 2 CPUs and 2 GB RAM."

# - name: Install crictl manually
#   block:
#     - name: Download crictl
#       get_url:
#         url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.28.0/crictl-v1.28.0-linux-amd64.tar.gz
#         dest: /tmp/crictl-v1.28.0-linux-amd64.tar.gz

#     - name: Extract crictl
#       unarchive:
#         src: /tmp/crictl-v1.28.0-linux-amd64.tar.gz
#         dest: /usr/local/bin
#         remote_src: yes

#     - name: Make crictl executable
#       file:
#         path: /usr/local/bin/crictl
#         mode: '0755'

# - name: Install required tools
#   yum:
#     name:
#       - conntrack
#       - socat
#       - iproute-tc
#     state: present

# - name: Initialize Kubernetes
#   command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU,Mem,FileExisting-crictl,FileExisting-conntrack
#   register: kubeadm_init_output

# - name: Create .kube directory
#   file:
#     path: /home/ec2-user/.kube
#     state: directory
#     mode: '0755'
#     owner: ec2-user
#     group: ec2-user

# - name: Copy kubeconfig file
#   command: >
#     cp -i /etc/kubernetes/admin.conf /home/ec2-user/.kube/config
#   become: true

# - name: Change ownership of kubeconfig file
#   file:
#     path: /home/ec2-user/.kube/config
#     owner: ec2-user
#     group: ec2-user
#     mode: '0644'

# - name: Install network plugin
#   command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#   environment:
#     KUBECONFIG: /home/ec2-user/.kube/config